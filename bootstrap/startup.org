#+TITLE:       yveszoundi emacs Org startup file.
#+EMAIL:       rimerosolutions AT gmail DOT com
#+STARTUP:     odd hidestars fold
#+LANGUAGE:    en
#+OPTIONS:     skip:nil toc:nil
#+HTML_HEAD:   <link rel="publisher" href="https://github.com/yveszoundi" />

* Startup
** Pre-startup
   Setup global functions and constants.

   #+begin_src emacs-lisp
     (defconst ers-bootstrap-dir (file-name-directory load-file-name)
       "Emacs Rimero Setup bootstrap folder.")

     (defconst ers-emacs-dir (file-name-directory (directory-file-name ers-bootstrap-dir))
       "Emacs Rimero Setup root folder.")

     (defconst ers-user-filename "ers-user.el"
       "Emacs Rimero Setup user file.")

     (defun ers/mkdir-p (dir-path)
       (unless (file-exists-p dir-path)
         (make-directory dir-path t)))

     (defun ers/emacs-sub-dir (path-elements)
       (let ((ers-emacs-sub-folder ers-emacs-dir))
         (cl-loop for p in path-elements
                  do (setq ers-emacs-sub-folder (file-name-as-directory (concat ers-emacs-sub-folder p))))
         ers-emacs-sub-folder))

     (defvar ers-user-file (concat user-emacs-directory ers-user-filename))

     (mapc #'(lambda(p) (add-to-list 'load-path p))
           `( ,(ers/emacs-sub-dir '("vendor"))))

     ;; packages
     (require 'package)
     (defalias 'plp 'package-list-packages)

     (let ((ers-package-archives '(("melpa" . "http://melpa.milkbox.net/packages/"))))
       (cl-loop for elt in ers-package-archives
                do (push elt package-archives)))

     (package-initialize)

     (unless package-archive-contents
       (package-refresh-contents))
   #+end_src

** Global variables
   Setup customization variables.

   #+begin_src emacs-lisp
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; global variables defcustoms
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defgroup emacs-rimero-setup nil
       "Emacs rimero setup group."
       :group 'customize
       :prefix "ers-")
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Credentials file for netrc authentication
     ;; Also symblink .authinfo to .netrc for offlineimap
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-secrets-file "~/.authinfo"
       "Secrets file."
       :type 'string
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; environment variables
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-env-variables
       '(("JAVA_HOME" . "/usr/lib/jvm/java-7-oracle")
         ("EDITOR"    . "emacsclient")
         ("LC_ALL"    . "C")
         ("LANG"      . "en"))
       "Environment variables."
       :type 'symbol
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Projects
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-projectile-folder "~/.emacs.d/data/projectile"
       "Projectile folder."
       :type 'directory
       :group 'emacs-rimero-setup)
     
     (defcustom ers-projectile-cache-filename "projectile.cache"
       "Projectile Cache filename"
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-projectile-bookmarks-filename "projectile-bookmarks.eld"
       "Projectile Bookmarks filename"
       :type 'string
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; blogging
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defvar personal-blog-name "wordpress-your-netrc-entry-in-dot-autinfo")
     (defvar corporate-blog-name "wordpress-your-netrc-entry-in-dot-autinfo")
     (defvar personal-blog-url "http://wordpress-site/xmlrpc.php")
     (defvar corporate-blog-url "http://wordpress-site/xmlrpc.php")
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; indentation
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-tab-size 4
       "Number of spaces for tabs."
       :type 'integer
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; ui settings
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-ui-font
       (cond ((eq system-type 'windows-nt) "Consolas-10")
             ((eq system-type 'darwin)     "Menlo-12:bold")
             ((eq system-type 'gnu/linux)  "DejaVu Sans Mono-12:bold")
             (t                            "Monospace-12:bold"))
       "Font to use."
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-ui-theme nil
       "GUI Theme to use."
       :type 'symbol
       :group 'emacs-rimero-setup)
     
     (defcustom ers-ui-theme-console nil
       "Console theme to use."
       :type 'symbol
       :group 'emacs-rimero-setup)
     
     (defcustom ers-powerline-enabled nil
       "Whether or not powerline is enabled."
       :type 'boolean
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; spelling
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-spelling-aspell-path "/usr/local/bin/aspell"
       "Aspell location for spell-checking."
       :type 'file
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; personal information
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-pim-mail-address "me@gmail.com"
       "Email address."
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-pim-public-mail-address "me.spam@gmail.com"
       "Public spam email address used for emacs-lisp snippets."
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-pim-full-name "MeFirstname MeLastName"
       "Full name."
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-pim-organization "My Company"
       "Organization name."
       :type 'string
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; org-mode
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-org-directory "~/.emacs.d/data/org/"
       "Org-mode folder."
       :type 'directory
       :group 'emacs-rimero-setup)
     
     (defcustom ers-org-archive-location-filename "archive.org::"
       "Org-mode archive location."
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-org-notes-filename "notes.org"
       "Org-mode notes file name."
       :type 'string
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; erc
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-erc-server "irc.freenode.net"
       "IRC server to use for erc."
       :type 'string
       :group 'emacs-rimero-setup)
     
     (defcustom ers-erc-channel-list '(("freenode.net" "##java" "#emacs"))
       "ERC connection information server and channels."
       :type 'symbol
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Files
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-ac-histfile "~/.emacs.d/data/ac-comphist.dat"
       "Auto-complete completion data."
       :type 'file
       :group 'emacs-rimero-setup)
     
     (defcustom ers-recentf-file "~/.emacs.d/data/recentf"
       "Recent file list."
       :type 'file
       :group 'emacs-rimero-setup)
     
     (defcustom ers-max-recent-files 300
       "Max number of recent files."
       :type 'integer
       :group 'emacs-rimero-setup)
     
     (defcustom ers-helm-adaptive-history-file "~/.emacs.d/data/helm-adaptative-history-file"
       "Helm adaptative history file"
       :type 'file
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Backups
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-bookmarks-file (expand-file-name  "~/.emacs.d/data/bookmarks")
       "Bookmarks"
       :type 'file
       :group 'emacs-rimero-setup)
     
     (defcustom ers-place-file (expand-file-name  "~/.emacs.d/data/saved-places")
       "Places file."
       :type 'directory
       :group 'emacs-rimero-setup)
     
     (defcustom ers-backup-dir (expand-file-name "~/.emacs.d/data/backups")
       "Backups folder."
       :type 'directory
       :group 'emacs-rimero-setup)
     
     (defcustom ers-auto-save-folder (expand-file-name "~/.emacs.d/data/auto-save-list/")
       "Auto-save folder."
       :type 'directory
       :group 'emacs-rimero-setup)
     
     (defcustom ers-url-cookie-file "~/.emacs.d/data/cookies"
       "Cookies file for url connections."
       :type 'file
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; eshell
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-eshell-dir "~/.emacs.d/data/eshell"
       "Eshell data folder."
       :type 'directory
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; packages
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-packages '()
       "A list of packages to ensure are installed."
       :type 'symbol
       :group 'emacs-rimero-setup)
     
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Programs
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ers-browser-program
       (cond ((eq system-type 'windows-nt) 'browse-url-default-windows-browser)
             ((eq system-type 'darwin)     'browse-url-default-macosx-browser)
             (t                            'browse-url-default-linux-browser))
       "Browser application:"
       :type 'symbol
       :group 'emacs-rimero-setup)
   #+end_src

** Post-startup

   Define package utility methods and install default packages.

   #+begin_src emacs-lisp
     (defun ers/package-install (pkg)
       "Install a package."
       (unless (package-installed-p pkg)
         (package-install pkg)))
     
     (defun ers/packages-install (pkgs)
       "Install a list of packages."
       (if (listp pkgs)
           (mapc #'ers/package-install pkgs)
         (error "The list of packages must be a list!")))
     
     (ers/packages-install (cons 'use-package ers-packages))
     
     (mapc #'require '(use-package netrc))
     
     (ers/mkdir-p ers-org-directory)
   #+end_src

   
* Sane defaults

  Setup some emacs defaults.

  #+begin_src emacs-lisp
    ;; Rebind some keys.
    (let ((key-bindings '(("C-s" . isearch-forward-regexp)
                          ("C-r" . isearch-backward-regexp))))
      (cl-loop for key-binding in key-bindings
               do `(bind-key* ,(car key-binding) (cdr key-binding))))

    ;; Enable disabled commands.
    (cl-loop for fn in '(downcase-region upcase-region erase-buffer)
             do (put fn 'disabled nil))

    ;; Transparently open compressed files.
    (auto-compression-mode t)

  #+end_src

* Backups and bookmarks

  Setup backups.

  #+begin_src emacs-lisp
    (setq backup-directory-alist         `(("." . ,ers-backup-dir))
          delete-old-versions            t
          kept-new-versions              6
          kept-old-versions              2
          version-control                t
          url-cookie-file                ers-url-cookie-file
          auto-save-list-file-prefix     ers-auto-save-folder
          tramp-auto-save-directory      ers-auto-save-folder)
  #+end_src

** Bookmarks

   Set the bookmarks file and turn-on autosave.

  #+begin_src emacs-lisp
    (setq bookmark-default-file ers-bookmarks-file
          bookmark-save-flag    1)
  #+end_src

* Aliases
  #+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defalias 'serc        'ers/start-erc)
  #+end_src

* Utility functions

  #+begin_src emacs-lisp
    (defun ers/burry-other-buffer ()
      "Close other buffer window."
      (interactive)
      (when (window-parent)
        (other-window -1)
        (bury-buffer)
        (other-window -1)))

    (defun ers/eval-and-replace (value)
      "Evaluate the sexp at point and replace it with its value"
      (interactive (list (eval-last-sexp nil)))
      (kill-sexp -1)
      (insert (format "%S" value)))

    (defun ers/get-string-from-file (filePath)
      "Return filePath's file content."
      (with-temp-buffer
        (insert-file-contents filePath)
        (buffer-string)))

    (defun ers/comment-or-uncomment-line-or-region ()
      "Comment or uncomment the current line or region."
      (interactive)
      (if (region-active-p)
          (comment-or-uncomment-region (region-beginning) (region-end))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))))

    (defun ers/copy-symbol-at-point ()
      "Copy the symbol at point."
      (interactive)
      (let ((b (bounds-of-thing-at-point 'symbol)))
        (when b
          (save-excursion
            (kill-ring-save (car b) (cdr b))))))

    (when (eq system-type 'darwin)
      (defvar osx-pbpaste-cmd "/usr/bin/pbpaste"
        "*command-line paste program")

      (defvar osx-pbcopy-cmd "/usr/bin/pbcopy"
        "*command-line copy program")

      (defun osx-pbpaste ()
        "paste the contents of the os x clipboard into the buffer at point."
        (interactive)
        (call-process osx-pbpaste-cmd nil t t))

      (defun osx-pbcopy ()
        "copy the contents of the region into the os x clipboard."
        (interactive)
        (if (or (and (boundp 'mark-active) mark-active)
                (and (fboundp 'region-exists-p) (region-exists-p)))
            (call-process-region
             (region-beginning) (region-end) osx-pbcopy-cmd nil t t)
          (error "region not selected"))))

    (defun ers/recompile-init-files()
      "Recompile emacsd files."
      (interactive)
      (byte-recompile-directory user-emacs-directory 0 nil))
  #+end_src

* Encoding settings

  #+begin_src emacs-lisp
    (set-language-environment   'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq locale-coding-system  'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)

    (unless (eq system-type 'windows-nt)
      (set-selection-coding-system 'utf-8))

    (prefer-coding-system 'utf-8)
  #+end_src

* Eshell configuration
  
  #+begin_src emacs-lisp
    (setq eshell-directory-name ers-eshell-dir)
    
    ;; Set environment variables
    (cl-loop for env-var in ers-env-variables
             do (setenv (car env-var) (cdr env-var)))
    
    (use-package exec-path-from-shell
      :ensure exec-path-from-shell
      :if (eq system-type 'darwin)
      :config (progn
                (setq exec-path-from-shell-variables '("PATH" "MANPATH" "SHELL"))
                (exec-path-from-shell-initialize)))
    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; EShell settings
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (require 'eshell)
    
    (require 'vc-git)
    (defun get-git-branch-name (path)
      (let ((git-directory (concat path "/.git")))
        (if (file-exists-p git-directory)
            (concat " (" (vc-git-mode-line-string git-directory) ") ")
          "")))
    
    (defun get-full-time()
      "Full date and time"
      (format-time-string "%a %d.%m.%y %H:%M:%S" (current-time)))
    
    (setq eshell-prompt-function (lambda nil
                                   (concat
                                    "\n"
                                    (concat "[" (eshell/pwd) "] - " (get-full-time))
                                    "\n"
                                    (user-login-name)
                                    "@"
                                    (system-name)
                                    (get-git-branch-name (eshell/pwd))
                                    " $ " )))
    
    (setq eshell-highlight-prompt       nil
          eshell-history-size           8000
          eshell-path-env               (getenv "PATH")
          eshell-cmpl-cycle-completions nil
          eshell-prompt-regexp          "^[^#$]*[#$] ")
    
    (if (boundp 'eshell-save-history-on-exit)
        (setq eshell-save-history-on-exit t)) ; Don't ask, just save
    
    (if (boundp 'eshell-ask-to-save-history)
        (setq eshell-ask-to-save-history 'always)) ; For older(?) version
    
    (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    
    (defun up (&optional level)
      "Change directory from one up to a level of folders."
      (let* ((path-level (or level 1))
             (path-levels-list (cl-loop for i from path-level downto 1 collect "../"))
             (path-string (apply #'concat path-levels-list)))
        (cd path-string)))
  #+end_src
  
* Indentation settings

  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)

    (defun ers/indentation-apply-style ()
      (cl-loop for elt in '("c-basic-offset"
                            "tab-width"
                            "js2-basic-offset"
                            "js-indent-level"
                            "py-indent-offset"
                            "sgml-basic-offset"
                            "nxml-child-indent"
                            "nxml-outline-child-indent")
               do (progn
                    (eval `(setq-default ,(intern elt) ers-tab-size))
                    (eval `(setq ,(intern elt) ers-tab-size)))))

    (defun ers/indentation-reset-tab-size (new-tab-size)
      (interactive "nEnter new tab size:\n")
      (setq ers-tab-size new-tab-size)
      (ers/indentation-apply-style))

    (ers/indentation-apply-style)

    (defun ers/indent-region-or-buffer ()
      "Indents an entire buffer using the default intenting scheme."
      (interactive)

      (if (region-active-p)
          (indent-region (region-beginning) (region-end))
        (progn
          (delete-trailing-whitespace)
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))

    (bind-key "C-c i" 'ers/indent-region-or-buffer)
    (bind-key "RET"   'newline-and-indent)
  #+end_src

* Org mode settings

  #+begin_src emacs-lisp
    (use-package org
      :ensure htmlize
      :init (progn
              (setq org-directory ers-org-directory)

              ;; default settings
              (setq org-archive-location (concat org-directory ers-org-archive-location-filename)
                    org-agenda-files (directory-files org-directory t "\.org$")
                    org-export-html-postamble nil
                    org-ers-notes-file (concat org-directory ers-org-notes-filename))

              ;; org capture menu
              (setq org-capture-templates
                    '(("d" "Tasks" entry
                       (file+headline org-ers-notes-file "Tasks")
                       "* TODO %?
    SCHEDULED: %^t"          :clock-in t :clock-resume t)

                      ("e" "Quick task" entry
                       (file+headline org-ers-notes-file "Tasks")
                       "* TODO %^{Task}
    SCHEDULED: %^t"

                       :immediate-finish t)

                      ("f" "Orientation" entry (file org-ers-notes-file)
                       "* ORIENTATION %? :@orientation:
    SCHEDULED: %^t"  :clock-in t :clock-resume t)

                      ("g" "Coding" entry (file org-ers-notes-file)
                       "* CODING%? :@coding:
    SCHEDULED: %^t"  :clock-in t :clock-resume t)

                      ("h" "Help" entry (file org-ers-notes-file)
                       "* HELP %? :@help:
    SCHEDULED: %^t"  :clock-in t :clock-resume t)


                      ("i" "Phone call" entry (file org-ers-notes-file)
                       "* PHONE %? :@phone:
    SCHEDULED: %^t"   :clock-in t :clock-resume t)


                      ("j" "Mail browsing" entry (file org-ers-notes-file)
                       "* EMAIL Browsing :@email:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)


                      ("k" "Mail reply" entry (file org-ers-notes-file)
                       "* EMAIL Reply %? :@email:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)


                      ("k" "Team Meetings" entry (file org-ers-notes-file)
                       "* TEAM MEETING :@meeting:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)


                      ("k" "Other meetings" entry (file org-ers-notes-file)
                       "* MEETING %? :@meeting:
    SCHEDULED: %^t"   :clock-in t :clock-resume t)


                      ("l" "Break" entry (file org-ers-notes-file)
                       "* BREAK :@break:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)))

              ;; todo states
              (setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)" "|" "WAITING(w)")
                                        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
                                        (sequence "|" "CANCELED(c)")))

              ;; tags
              (setq org-tag-alist '(("@orientation" . ?a)
                                    ("@coding" . ?b)
                                    ("@help" . ?c)
                                    ("@phone" . ?d)
                                    ("@documentation" . ?e)
                                    ("@meeting" . ?f)
                                    ("@email" . ?g)
                                    ("@break" . ?h)))

              ;; require htmlize.el
              (setq org-agenda-exporter-settings'((ps-number-of-columns 2)
                                                  (ps-landscape-mode t)
                                                  (org-agenda-add-entry-text-maxlines 5)
                                                  (htmlize-output-type 'css)))))
  #+end_src

* Personal information

  #+begin_src emacs-lisp
    (setq user-mail-address ers-pim-mail-address
          user-full-name ers-pim-full-name
          message-signature-file "~/.signature")
  #+end_src

* Programming and related
** Shell scripts
   #+begin_src emacs-lisp
     (use-package batch-mode
       :ensure batch-mode
       :mode ("\\.\\(bat\\)$" . batch-mode))
   #+end_src
** Version control

   Setup svn and git.

   #+begin_src emacs-lisp
     (use-package vc-svn
       :ensure dsvn
       :init (progn
               (autoload 'svn-status "dsvn" "Run `svn status'." t)
               (autoload 'svn-update "dsvn" "Run `svn update'." t)))

     (use-package magit
       :ensure magit
       :bind    ("C-x g" . magit-status)
       :config  (defadvice magit-status (after magit-status-advice (dir) activate)
                  (when (window-parent)
                    (delete-other-windows))))
   #+end_src

** Project management
   Use projectile for project management.

   #+begin_src emacs-lisp
     (use-package projectile
       :ensure projectile
       :config (projectile-global-mode t)
       :init (progn
               ;; create projectile data folder if non-existent
               (ers/mkdir-p ers-projectile-folder)
     
               ;; set projectile custom variables
               (let* ((ers-projectile-dir (file-name-as-directory ers-projectile-folder))
                      (ers-projectile-cache-file (concat ers-projectile-dir ers-projectile-cache-filename))
                      (ers-projectile-bookmarks-file (concat ers-projectile-dir ers-projectile-bookmarks-filename)))
                 (setq projectile-cache-file          ers-projectile-cache-file
                       projectile-known-projects-file ers-projectile-bookmarks-file
                       projectile-indexing-method     'alien
                       projectile-enable-caching      t)))
       :diminish projectile-mode)
   #+end_src

** Groovy and Grails

   Settings for Groovy and Grails development.

*** Groovy mode
   #+begin_src emacs-lisp
     (use-package groovy-mode
       :ensure groovy-mode
       :defer t
       :mode ("\\.\\(groovy\\|gradle\\)$" . groovy-mode))
   #+end_src

*** Grails settings

   #+begin_src emacs-lisp
     (use-package grails-projectile-mode
       :init (grails-projectile-global-mode t)
       :diminish grails-projectile-mode)
   #+end_src

** XML mode

   #+begin_src emacs-lisp
     (use-package nxml-mode
       :init (setq nxml-slash-auto-complete-flag t)
       :defer t
       :mode ("\\.\\(pom\\|xsd\\|xsl\\|xslt\\|gsp\\)$" . nxml-mode))
   #+end_src

** Markdown keybindings

   #+begin_src emacs-lisp
     (use-package markdown-mode
       :ensure markdown-mode
       :defer t
       :mode ("\\.\\(markdown\\|mdown\\|md\\)$" . markdown-mode))
   #+end_src

* Yasnippets configuration

  #+begin_src emacs-lisp
    (use-package yasnippet
      :ensure yasnippet
      :init (progn
              (setq yas-verbosity 1)
              )
      :config (progn
                (yas-global-mode 1)

                (let* ((yas-elpa-snippets-folder (car (file-expand-wildcards
                                                       (concat user-emacs-directory "elpa/yasnippet-*/snippets"))))
                       (yas-folder-candidates  `(,yas-elpa-snippets-folder
                                                 ,(concat user-emacs-directory "snippets")
                                                 ,(concat ers-emacs-dir "snippets"))))

                  (cl-loop for p in yas-folder-candidates
                           unless (file-exists-p p)
                           do (cl-delete p yas-folder-candidates))

                  (setq yas-snippet-dirs yas-folder-candidates))
                (yas-reload-all)
                (define-key yas-minor-mode-map (kbd "<tab>") 'yas/insert-snippet))
      :diminish yas-minor-mode)
  #+end_src

* Spellchecking configuration

  #+begin_src emacs-lisp
    (setq ispell-program-name ers-spelling-aspell-path)
  #+end_src

* Networking
** Web browsing

   #+begin_src emacs-lisp
     (setq browse-url-browser-function          ers-browser-program
           browse-url-new-window-flag           t
           browse-url-firefox-new-window-is-tab t)
     (bind-key "C-c m ." 'browse-url-at-point)

     ;; w3m
     (use-package w3m
       :ensure w3m
       :init (setq w3m-coding-system             'utf-8
                   w3m-file-coding-system        'utf-8
                   w3m-file-name-coding-system   'utf-8
                   w3m-input-coding-system       'utf-8
                   w3m-output-coding-system      'utf-8
                   w3m-terminal-coding-system    'utf-8
                   w3m-use-cookies               t
                   w3m-cookie-accept-bad-cookies t)
       :bind ("C-c m w" . w3m-browse-url))

   #+end_src

** IRC configuration

   #+begin_src emacs-lisp
     (use-package erc
       :config (progn
                 (setq erc-kill-buffer-on-part          t
                       erc-prompt-for-nickserv-password nil
                       erc-autojoin-channels-alist      ers-erc-channel-list
                       erc-kill-queries-on-quit         t
                       erc-default-coding-system        '(utf-8 . utf-8)
                       erc-hide-list                    '("JOIN" "PART" "QUIT" "NICK")
                       erc-kill-server-buffer-on-quit   t)

                 (setq erc-prompt  (lambda () (concat (buffer-name) "> ")))

                 ;; auto-fill buffer window
                 (add-hook 'window-configuration-change-hook
                           '(lambda () (setq erc-fill-column (- (window-width) 2)))))

       :init (defun ers/start-erc ()
               (interactive)
               (erc-autojoin-mode 1)
               (let ((erc-config (netrc-machine (netrc-parse ers-secrets-file) "erc-config" t)))
                 (erc :server   ers-erc-server
                      :nick     (netrc-get erc-config "login")
                      :password (netrc-get erc-config "password")))))

   #+end_src

** Blogging

   #+begin_src emacs-lisp
     (use-package org2blog
       :ensure org2blog
       :config (setq corporate-blog (netrc-machine (netrc-parse ers-secrets-file) "corporate-blog" t)
                     personal-blog  (netrc-machine (netrc-parse ers-secrets-file) "personal-blog"  t)
                     org2blog/wp-blog-alist `((,corporate-blog-name
                                               :url ,corporate-blog-url
                                               :username (netrc-get corporate-blog "login")
                                               :password (netrc-get corporate-blog "password"))
                                              (,personal-blog-name
                                               :url ,personal-blog-url
                                               :username (netrc-get personal-blog "login")
                                               :password (netrc-get personal-blog "password")))))

   #+end_src

* Various utilities

  #+begin_src emacs-lisp
    (defun ers/insert-time (&optional date-pattern)
      "Inserts the time given an optional pattern."
      (interactive "P")
      (let ((current-date-pattern (or date-pattern "%a %d.%m.%y %H:%M:%S")))
        (insert (ers/get-date current-date-pattern))))

    (defun ers/get-date (date-pattern)
      "Returns a formatted date for a given pattern."
      (format-time-string date-pattern (current-time)))

    (defun ers/insert-date-simple ()
      "Inserts the time in year-month-date format."
      (interactive)
      (ers/insert-time "%Y-%m-%d"))

    (defun ers/insert-date-raw ()
      "Insert the time in raw format."
      (interactive)
      (ers/insert-time "%Y%m%d.%H%M%S"))

    (defun ers/insert-date-full()
      "Inserts the full date and time."
      (interactive)
      (ers/insert-time "%a %d.%m.%y %T"))

    (defun open-next-line (arg)
      "Move to the next line and then opens a line.
                                    See also `newline-and-indent'."
      (interactive "p")
      (end-of-line)
      (open-line arg)
      (forward-line 1))

    (defun open-previous-line (arg)
      "Open a new line before the current one.
                                     See also `newline-and-indent'."
      (interactive "p")
      (beginning-of-line)
      (open-line arg))

    (use-package ace-window
      :ensure ace-window
      :bind ("C-c w" . ace-window))

    (use-package browse-kill-ring
      :ensure browse-kill-ring
      :defer t
      :config (browse-kill-ring-default-keybindings))

    (use-package anzu
      :ensure anzu
      :config (global-anzu-mode t)
      :diminish anzu-mode)

    (use-package wrap-region
      :ensure wrap-region
      :config (wrap-region-global-mode t)
      :diminish wrap-region-mode)

    (use-package undo-tree
      :ensure undo-tree
      :config (global-undo-tree-mode t)
      :init (setq undo-tree-visualizer-relative-timestamps  t
                  undo-tree-visualizer-timestamps           t)
      :diminish undo-tree-mode)

    (use-package expand-region
      :ensure expand-region
      :bind ("C-c e" . er/expand-region))

    (use-package hl-line
      :init (add-hook 'prog-mode-hook 'hl-line-mode))

    (use-package linum
      :init (setq linum-format (quote "%4d "))
      :config (add-hook 'prog-mode-hook 'linum-mode))

    (use-package ace-jump-mode
      :ensure ace-jump-mode
      :bind ( ("C-c j" . ace-jump-mode)
              ("C-x j" . ace-jump-char-mode))
      :diminish ace-jump-mode)

    (use-package buffer-stack
      :ensure buffer-stack
      :bind (("C-c [" . buffer-stack-down)
             ("C-c ]" . buffer-stack-up))
      :init (buffer-stack-track))

    (use-package uniquify
      :config (setq uniquify-separator           "/"
                    uniquify-buffer-name-style   'forward
                    uniquify-after-kill-buffer-p t
                    uniquify-ignore-buffers-re   "^\\*"))

    (use-package saveplace
      :init (progn (setq-default save-place t)
                   (setq save-place-file ers-place-file)))

    (use-package recentf
      :init (progn (setq recentf-max-menu-items ers-max-recent-files
                         recentf-exclude        '("/tmp" "/ssh:" "\\ido.last" "recentf")
                         recentf-save-file      ers-recentf-file)
                   (recentf-mode +1))

      :bind ("C-x C-r" . helm-recentf))

    (use-package ls-lisp
      :config (setq ls-lisp-use-insert-directory-program nil
                    ls-lisp-dirs-first t
                    ls-list-ignore-case t))

    (use-package dired
      :defer t
      :init (setq dired-recursive-deletes 'always
                  dired-recursive-copies  'always)
      :config (progn
                (put 'dired-find-alternate-file 'disabled nil)
                (defun ers/dired-go-to-first-item ()
                  (interactive)
                  (goto-char (point-min))
                  (dired-next-line 3))

                (defun ers/dired-go-to-last-item ()
                  (interactive)
                  (goto-char (point-max))
                  (dired-previous-line 1))

                (defun ers/copy-filename-at-point (arg)
                  (interactive "P")

                  (let ((f-name-prefix ""))
                    (when arg
                      (setq f-name-prefix default-directory))

                    (save-excursion
                      (end-of-line)
                      (let ((b (bounds-of-thing-at-point 'filename)))
                        (when b
                          (save-excursion
                            (let ((beg (decf (car b)))
                                  (end (decf (cdr b))))
                              (kill-new
                               (concat f-name-prefix
                                       (substring-no-properties (buffer-string)
                                                                beg
                                                                end))))))))))

                (bind-keys :map dired-mode-map
                           ("."   .  dired-up-directory)
                           ("@"   . ers/copy-filename-at-point )
                           ("M-P" . ers/dired-go-to-first-item )
                           ("M-N" . ers/dired-go-to-last-item ))))

    (use-package dired-details
      :ensure dired-details
      :init (setq-default dired-details-hidden-string "--- ")
      :config (dired-details-install))

    (use-package drag-stuff
      :ensure drag-stuff
      :bind (("M-P" . drag-stuff-up)
             ("M-N" . drag-stuff-down)))

    (use-package rainbow-delimiters
      :ensure rainbow-delimiters
      :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

    (use-package duplicate-thing
      :ensure duplicate-thing
      :bind ("C-c d" . duplicate-thing))

    (let ((ers-keybindings `((,(kbd "C-c g")   . goto-line)
                             (,(kbd "C-o")     . open-next-line)
                             (,(kbd "M-o")     . open-previous-line)
                             (,(kbd "C-x 4 k") . ers/burry-other-buffer)
                             (,(kbd "C-c C-e") . ers/eval-and-replace)
                             (,(kbd "C-x y")   . ers/copy-symbol-at-point)
                             (,(kbd "C-c r")   . revert-buffer)
                             (,(kbd "C-c /")   . ers/comment-or-uncomment-line-or-region))))
      (dolist (ers-keybinding ers-keybindings)
        (global-set-key (car ers-keybinding) (cdr ers-keybinding))))

    (add-hook 'emacs-lisp-mode-hook       'eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)

    (use-package eldoc
      :defer t
      :diminish eldoc-mode)
  #+end_src

* Completion, matching and suggestions
** Hippie-expand

   #+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))

  (global-set-key "\M- " 'hippie-expand)
   #+end_src

** Auto-complete settings

   #+begin_src emacs-lisp
     (use-package company
       :ensure company
       :init (setq company-begin-commands '())
       :config (add-hook 'after-init-hook 'global-company-mode)
       :bind ("C-c TAB" . company-complete))
   #+end_src

** Helm settings

   #+begin_src emacs-lisp
     (use-package helm
       :ensure helm

       :config (setq helm-ff-transformer-show-only-basename nil
                     helm-adaptive-history-file             ers-helm-adaptive-history-file
                     helm-boring-file-regexp-list           '("\\.git$" "\\.svn$" "\\.elc$")
                     helm-yank-symbol-first                 t
                     helm-ff-auto-update-initial-value      t
                     helm-input-idle-delay                  0.1
                     helm-idle-delay                        0.1)

       :init (progn
               (require 'helm-config)
               (helm-mode t)
               (helm-adaptative-mode t)

               (use-package helm-ag
                 :init (use-package ag
                         :ensure ag)
                 :ensure helm-ag
                 :bind ("C-c a" . helm-ag))     

               (use-package helm-descbinds
                 :ensure helm-descbinds
                 :bind ("C-h b"   . helm-descbinds))

               (use-package helm-projectile
                 :ensure helm-projectile
                 :bind ("C-c h" . helm-projectile))

               (add-hook 'eshell-mode-hook
                         #'(lambda ()
                             (bind-key "M-p" 'helm-eshell-history eshell-mode-map)))

               (use-package helm-swoop
                 :ensure helm-swoop
                 :bind (("C-c o" . helm-swoop)
                        ("C-c M-o" . helm-multi-swoop)))
                        

               (bind-key "C-c C-SPC" 'helm-ff-run-toggle-auto-update helm-find-files-map))     

       :bind (("C-x r l" . helm-bookmarks)
              ("C-x C-m" . helm-M-x)
              ("C-x C-f" . helm-find-files)
              ("C-x C-b" . helm-buffers-list))

       :diminish helm-mode)
   #+end_src

* UI configuration

** Misc

   #+begin_src emacs-lisp
     (setq visible-bell             t
           display-time-24hr-format t
           use-dialog-box           nil
           default-frame-alist      `((font . ,ers-ui-font)))

     (use-package popwin
       :ensure popwin
       :config (setq display-buffer-function 'popwin:display-buffer))

     (defun turn-on-linum-hl-mode-hook ()
       (hl-line-mode 1)
       (linum-mode 1))

     (use-package nxml-mode
       :init (add-hook 'nxml-mode-hook 'turn-on-linum-hl-mode-hook))

   #+end_src

** Themes

   #+begin_src emacs-lisp
     (defun ers/load-theme (theme-symbol)
       (when (and (boundp theme-symbol)
                  (symbol-value theme-symbol))
         (funcall 'load-theme (symbol-value theme-symbol) t)))
     
     (if window-system
         (ers/load-theme 'ers-ui-theme)
       (ers/load-theme 'ers-ui-theme-console))
   #+end_src

** Modeline

   #+begin_src emacs-lisp
     (use-package powerline
       :ensure powerline
       :defer t
       :if (and (boundp 'ers-powerline-enabled)
                ers-powerline-enabled)
       :init   (setq powerline-arrow-shape 'curve)
       :config (powerline-default-theme))
   #+end_src

** Fonts
   #+begin_src emacs-lisp
     (defun ers/fontify-frame (frame)
       (set-frame-parameter frame 'font ers-ui-font))

     (defun ers/set-current-font ()
       (interactive)
       ;; Fontify current frame
       (ers/fontify-frame nil)
       ;; Fontify any future frames
       (push 'ers/fontify-frame after-make-frame-functions))

     (if window-system
         (ers/set-current-font))
   #+end_src

** Enable/Disable UI modes

   #+begin_src emacs-lisp
     (defun ers/apply-frame-settings ()
       (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode blink-cursor-mode))
         (when (fboundp mode) (funcall mode -1)))

       (dolist (mode '(show-paren-mode display-time-mode column-number-mode))
         (when (fboundp mode) (funcall mode 1))))

     (ers/apply-frame-settings)
   #+end_src

* User settings

  #+begin_src emacs-lisp
    (when (file-exists-p ers-user-file)
      (load ers-user-file 'noerror))

    (message "emacs-rimero-setup done loading.")
  #+end_src
